https://leetcode.com/problems/removing-minimum-and-maximum-from-array/

class Solution {
public:
    int minimumDeletions(vector<int>& nums) {
        int n=nums.size();
       int temp1=max_element(begin(nums), end(nums)) - begin(nums);
       int temp2=min_element(begin(nums), end(nums)) - begin(nums);
    
        int ans1=max(temp1,temp2)+1;
        int ans2=n-min(temp1,temp2);
        int ans3=min(temp1,temp2)+1+n-max(temp1,temp2);
        
        int ans=min(ans1,min(ans2,ans3));
        
        return ans;
    }
};

https://leetcode.com/problems/di-string-match/submissions/

class Solution {
public:
    vector<int> diStringMatch(string s) {
        int n=s.length();
        int it1=0;
        int it2=n;
        vector<int>ans;
        
            for(int i=0;i<n;i++)
            {
                if(s[i]=='I')
                {ans.push_back(it1);
                 it1++;
                }
                else
                {
                    ans.push_back(it2);
                    it2--;
                }
            }
            ans.push_back(it1);
        return ans;
        }
};

https://leetcode.com/problems/lemonade-change/submissions/

class Solution {
public:
    bool lemonadeChange(vector<int>& bills) {
        int five=0;
        int ten=0;
        for(int i:bills)
        {
            if(i==5)five++;
            else if(i==10)
            {
                
                five--;
                ten++;
            }
            else if(ten>0)
            {
                ten--;
                five--;
            }
            else
                five-=3;
           if(five<0)return false;
            
        }
        return true;
    }
};