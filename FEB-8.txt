https://leetcode.com/problems/target-sum/

class Solution {
public:
    int perfectsum(vector<int>& nums,int x,int s1)
    {
        int dp[x+1][s1+1];
        for(int i=0;i<x+1;i++)
        {
            for(int j=0;j<s1+1;j++)
            {
                if(j==0)dp[i][j]=1;
                else if(i==0 &&j!=0)dp[i][j]=0;
                else
                {
                     if(nums[i-1]>j || nums[i-1]==0)
                        dp[i][j]=dp[i-1][j];                                                                        else
                         dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i-1]];

                }
            }
        }
            return dp[x][s1];
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        
        int x=nums.size();
        int sum=0;
        int s1;
        int count=0;
        for(int i=0;i<x;i++)
        {
            sum+=nums[i];
            if(nums[i]==0)count++;
        }
        if(target>sum)return 0;
        int s2=abs(target+sum);
        
        if(s2%2==0)
        {
            s1=s2/2;
        int ans=perfectsum(nums,x,s1);
        return ans*(pow(2,count));
        }
        else
            return 0;
    }
    
};

https://leetcode.com/problems/sort-characters-by-frequency/

class Solution {
public:
    bool static cmp(const pair<char,int>&a ,const pair<char,int>&b){
        return a.second>b.second;}
    
    string frequencySort(string s) {
        int n=s.length();
        map<char,int>m;
        for(int i=0;i<n;i++)
            m[s[i]]++;
        
        vector<pair<int,int>>vec;
        for(auto it:m)
        {
            vec.push_back({it.first,it.second});
        }
        sort(vec.begin(),vec.end(),cmp);
        string ans="";
        for(int i=0;i<vec.size();i++)
        {
            for(int j=0;j<vec[i].second;j++)
                ans+=vec[i].first;
        }
        return ans;
    }
};