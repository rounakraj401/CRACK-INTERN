https://leetcode.com/problems/watering-plants/

class Solution {
public:
    int wateringPlants(vector<int>& plants, int capacity) {
        int n=plants.size();
        vector<int>vec;
        int sum=0;
        int ans=0;
        int c=capacity;
        for(int i=0;i<n-1;i++)
        {
            c-=plants[i];
            if(c<plants[i+1])
            {
                ans+=2*(i+1);
                c=capacity;
            }
        }
        
        return ans+n;
    }
};

https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/submissions/

class Solution {
public:
    int minPartitions(string n) {
        int x=n.length();
        int maxm=0;
        for(int i=0;i<x;i++)
        {
            if((n[i]-'0')>maxm)maxm=n[i]-'0';
        }
        return maxm;
    }
};