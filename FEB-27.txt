https://leetcode.com/problems/partition-array-according-to-given-pivot/

class Solution {
public:
    vector<int> pivotArray(vector<int>& nums, int pivot) {
        int n=nums.size();
        vector<int>vec1;
        vector<int>vec2;
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            if(nums[i]<pivot)vec1.push_back(nums[i]);
            else if(nums[i]>pivot)vec2.push_back(nums[i]);
            else
                cnt++;
        }
        for(int i=0;i<cnt;i++)
            vec1.push_back(pivot);
        
        for(int i=0;i<vec2.size();i++)
            vec1.push_back(vec2[i]);
        
        return vec1;
    }
};

https://leetcode.com/problems/arithmetic-subarrays/

class Solution {
public:
    bool check(vector<int>&vec)
    {
        int n=vec.size();
        sort(vec.begin(),vec.end());
        int d=vec[1]-vec[0];
        for(int i=2;i<n;i++)
        {
            if(vec[i]-vec[i-1]!=d)
            {
                return false;
            }
        }
        return true;
    }
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {
        int n=nums.size();
        int x=l.size();
        vector<bool>ans;
        for(int i=0;i<x;i++)
        {
            vector<int>vec;
            for(int j=l[i];j<=r[i];j++)
            {
                vec.push_back(nums[j]);
            }
            if(check(vec))
                ans.push_back(true);
            else
                ans.push_back(false);
        }
        return ans;
    }
};