https://leetcode.com/problems/smallest-value-of-the-rearranged-number/

class Solution {
public:
    long long smallestNumber(long long num) {
        if(num<=0)
        {
            num=abs(num);
            string s=to_string(num);
            sort(s.begin(),s.end());
            reverse(s.begin(),s.end());
            
            long long int ans=stoll(s);
            return -ans;
        }
        else
        {
            string s1=to_string(num);
            sort(s1.begin(),s1.end());
            
            int cnt=0;char temp;
            string ans="";
            int n=s1.length();
            string x="";
            bool flag=0;
            for(int i=0;i<n;i++)
            {
                if(s1[i]=='0')cnt++;
                else if(flag==1)
                {
                    x+=s1[i];
                    continue;
                }
                else
                {
                    temp=s1[i];
                    flag=1;
                }
            }
            ans+=temp;
            for(int i=0;i<cnt;i++)ans+='0';
            ans+=x;
            
            long long int number=stoll(ans);
            return number;
            
        }
    }
};

https://leetcode.com/problems/peak-index-in-a-mountain-array/

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int n=arr.size();
        int l=0;
        int h=n-1;
        while(l<h)
        {
            int mid=l+(h-l)/2;
            
            if(arr[mid]>arr[mid+1])
            {
                h=mid;
            }
            else
                l=mid+1;
        }
        return l;
        // return end-->both start and end will point to same no at the end
    }
};

https://leetcode.com/problems/find-peak-element/

class Solution {
public:
    int findPeakElement(vector<int>& arr) {
        int n=arr.size();
        int l=0;
        int h=n-1;
        while(l<h)
        {
            int mid=l+(h-l)/2;
            
            if(arr[mid]>arr[mid+1])
            {
                h=mid;
            }
            else
                l=mid+1;
        }
        return l;
    }
};