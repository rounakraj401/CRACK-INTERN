https://leetcode.com/problems/kth-largest-element-in-an-array/

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
        return nums[nums.size()-k];
    }
};

https://leetcode.com/problems/third-maximum-number/

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        int i=n-1;
        int cnt=1;
        for(i=n-1;i>=1;i--)
        {
            if(cnt==3)
            {
                return nums[i];
                break;
            }
            if(nums[i]!=nums[i-1])
                cnt++;
        }
        if(cnt==3)return nums[i];
        return nums[n-1];
    }
};

https://leetcode.com/problems/find-smallest-letter-greater-than-target/

class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int t=target-'a';
        int n=letters.size();
        vector<int>vec(n);
        for(int i=0;i<n;i++)
           vec[i]=letters[i]-'a';
        
        if(t>vec[n-1])return vec[0]+'a';
        
        int l=0;
        int h=n-1;
        while(l<=h)
        {
            int mid=l+(h-l)/2;

            if(t>=vec[mid])
                l=(mid+1);
            else if(t<vec[mid])
                h=(mid-1);
        }
        if(l>h)
        return vec[l%n]+'a';
    }
};

https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int temp1=-1;
        int temp2=-1;
        vector<int>ans;
        int n=nums.size();
        int l=0;
        int h=n-1;
        while(l<=h)
        {
            int mid=l+(h-l)/2;
            if(nums[mid]<target)
                l=mid+1;
            else if(nums[mid]>target)
                h=mid-1;
            else
            {
                temp1=mid;
                h=mid-1;
            }
        }
         l=0;
         h=n-1;
        while(l<=h)
        {
            int mid=l+(h-l)/2;
            if(nums[mid]>target)
                h=mid-1;
            else if(nums[mid]<target)
                l=mid+1;
            else
            {
                temp2=mid;
                l=mid+1;
            }
        }
        ans.push_back(temp1);
        ans.push_back(temp2);
        return ans;
    }
};