https://leetcode.com/problems/minimum-falling-path-sum/

class Solution {
public:
/*    int fun(int i,int j,vector<vector<int>>& matrix,int n,vector<vector<int>>&dp)
    {
        
        if(j<0 || j>n-1)return 1e8;
        if(i==0)return matrix[i][j];
        if(dp[i][j]!=-1)return dp[i][j];
        

        
          int  d1=matrix[i][j]+fun(i-1,j,matrix,n,dp);
          int  d2=matrix[i][j]+fun(i-1,j-1,matrix,n,dp);
          int  d3=matrix[i][j]+fun(i-1,j+1,matrix,n,dp);
        
        int temp=min(d1,min(d2,d3));
        return dp[i][j]=temp;
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector<vector<int>>dp(n,vector<int>(n,-1));
        int minm=1e8;
        
        for(int j=0;j<n;j++)
        {
            minm=min(minm,fun(n-1,j,matrix,n,dp));
        }
        return minm;
    }
*/
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector<vector<int>>dp(n,vector<int>(n,0));
        for(int j=0;j<n;j++)
        {
            dp[0][j]=matrix[0][j];
        }
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                int d3=1e8;
                int d2=1e8;
                int d1;
                
                d1=matrix[i][j]+dp[i-1][j];
                if(j>0)
                d2=matrix[i][j]+dp[i-1][j-1];
                if(j<n-1)
                d3=matrix[i][j]+dp[i-1][j+1];
                
                dp[i][j]=min(d1,min(d2,d3));
            }
        }
        int minm=1e8;
        for(int j=0;j<n;j++)
        {
            minm=min(minm,dp[n-1][j]);
        }
        return minm;
    }
    
    
};